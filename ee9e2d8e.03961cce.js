(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{80:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return d})),t.d(n,"default",(function(){return s}));var r=t(2),a=t(6),o=(t(0),t(85)),i={id:"structuring-queries",title:"Structuring Queries"},l={unversionedId:"structuring-queries",id:"structuring-queries",isDocsHomePage:!1,title:"Structuring Queries",description:"Since Flutter is built around the principle of Widget composition, it's common to have data spread across many nested widgets. For example, let's say we want to have a PokemonList Widget that displays a list of PokemonCard Widgets.",source:"@site/../docs/structuring-queries.md",slug:"/structuring-queries",permalink:"/ferry/docs/structuring-queries",editUrl:"https://github.com/gql-dart/ferry/edit/master/docs/../docs/structuring-queries.md",version:"current",sidebar:"mainSidebar",previous:{title:"Operation Widget",permalink:"/ferry/docs/flutter-operation-widget"},next:{title:"Custom Scalars",permalink:"/ferry/docs/custom-scalars"}},d=[{value:"Colocation of Widgets and Data Requirements",id:"colocation-of-widgets-and-data-requirements",children:[]},{value:"Fragments on Root Query",id:"fragments-on-root-query",children:[]}],c={rightToc:d};function s(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Since Flutter is built around the principle of Widget composition, it's common to have data spread across many nested widgets. For example, let's say we want to have a ",Object(o.b)("inlineCode",{parentName:"p"},"PokemonList")," Widget that displays a list of ",Object(o.b)("inlineCode",{parentName:"p"},"PokemonCard")," Widgets."),Object(o.b)("p",null,"Our Widget tree might look like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"MaterialApp\n  PokemonList\n    PokemonCard\n    PokemonCard\n    PokemonCard\n")),Object(o.b)("p",null,"Our first impulse might be to write a Query like this one:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-graphql"}),"query AllPokemon {\n  pokemons {\n    id\n    name\n    avatar\n  }\n}\n")),Object(o.b)("p",null,"And use it in the following Widgets:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-dart"}),"import 'package:flutter/material.dart';\nimport 'package:ferry/ferry.dart';\nimport 'package:ferry_flutter/ferry_flutter.dart';\nimport 'package:get_it/get_it.dart';\nimport 'package:built_collection/built_collection.dart';\n\nimport './graphql/all_pokemon.data.gql.dart';\nimport './graphql/all_pokemon.req.gql.dart';\nimport './graphql/all_pokemon.var.gql.dart';\n\nclass PokemonList extends StatelessWidget {\n  final client = GetIt.I<Client>();\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Pokemon List'),\n      ),\n      body: Operation<GAllPokemonData, GAllPokemonVars>(\n        client: client,\n        operationRequest: GAllPokemonReq(),\n        builder: (context, response, error) {\n          if (response!.loading)\n            return Center(child: CircularProgressIndicator());\n\n          final pokemons = response.data?.pokemons? ?? BuiltList();\n\n          return ListView.builder(\n            itemCount: pokemons.length,\n            itemBuilder: (context, index) => PokemonCard(\n              pokemon: pokemons[index],\n            ),\n          );\n        },\n      ),\n    );\n  }\n}\n\nclass PokemonCard extends StatelessWidget {\n  final GAllPokemonData_pokemons pokemon;\n\n  const PokemonCard({required this.pokemon});\n\n  @override\n  Widget build(BuildContext context) {\n    return Card(\n      child: InkWell(\n        onTap: () => Navigator.of(context)\n            .pushNamed('detail', arguments: {'id': pokemon.id}),\n        child: Padding(\n          padding: const EdgeInsets.all(8.0),\n          child: Column(\n            children: <Widget>[\n              SizedBox(\n                child: Ink.image(image: NetworkImage(pokemon.avatar)),\n                height: 200,\n                width: 200,\n              ),\n              Text(\n                pokemon.name,\n                style: Theme.of(context).textTheme.headline6,\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n")),Object(o.b)("p",null,"While this works, it tightly couples our ",Object(o.b)("inlineCode",{parentName:"p"},"PokemonList")," and ",Object(o.b)("inlineCode",{parentName:"p"},"PokemonCard")," Widgets which causes several disadvantages:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Our ",Object(o.b)("inlineCode",{parentName:"li"},"PokemonCard")," Widget can't be reused with data from other GraphQL Operations since it has an explicit dependency on the ",Object(o.b)("inlineCode",{parentName:"li"},"GAllPokemonData_pokemons")," type."),Object(o.b)("li",{parentName:"ol"},"Our ",Object(o.b)("inlineCode",{parentName:"li"},"AllPokemon")," Query must keep track of the data requirements not only for our ",Object(o.b)("inlineCode",{parentName:"li"},"PokemonList")," itself (in which the query is executed), but also for all child Widgets (i.e. ",Object(o.b)("inlineCode",{parentName:"li"},"PokemonCard"),").")),Object(o.b)("h2",{id:"colocation-of-widgets-and-data-requirements"},"Colocation of Widgets and Data Requirements"),Object(o.b)("p",null,"A common pattern to overcome these issues is to ",Object(o.b)("em",{parentName:"p"},"colocate")," Widgets and their data requirements. In other words, each Widget should have a corresponding GraphQL definition that specifies only the data needed for that Widget."),Object(o.b)("p",null,"A naive implementation of this (don't do this) might be to:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Request only the ",Object(o.b)("inlineCode",{parentName:"li"},"id")," field in our ",Object(o.b)("inlineCode",{parentName:"li"},"AllPokemon")," Query"),Object(o.b)("li",{parentName:"ol"},"Pass the ",Object(o.b)("inlineCode",{parentName:"li"},"id")," to the ",Object(o.b)("inlineCode",{parentName:"li"},"PokemonCard")),Object(o.b)("li",{parentName:"ol"},"Execute a ",Object(o.b)("inlineCode",{parentName:"li"},"GetPokemon")," Query in our ",Object(o.b)("inlineCode",{parentName:"li"},"PokemonCard")," that fetches the data only for that Pokemon")),Object(o.b)("p",null,"However, this would result in a seperate network request (and subsequent database query) for each Pokemon in the list. Not very efficient."),Object(o.b)("p",null,"Instead, we can extract our ",Object(o.b)("inlineCode",{parentName:"p"},"PokemonCard"),"'s data requirements into a Fragment:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-graphql"}),"fragment PokemonCardFragment on Pokemon {\n  id\n  name\n  avatar\n}\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-graphql"}),"# import './pokemon_card_fragment.graphql'\n\nquery AllPokemon {\n  pokemons {\n    ...PokemonCardFragment\n  }\n}\n")),Object(o.b)("p",null,"Now our ",Object(o.b)("inlineCode",{parentName:"p"},"PokemonCard")," can depend on the ",Object(o.b)("inlineCode",{parentName:"p"},"GPokemonCardFragment")," type."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-dart",metastring:"{2}","{2}":!0}),"import 'package:flutter/material.dart';\nimport './graphql/pokemon_card_fragment.data.gql.dart';\n\nclass PokemonCard extends StatelessWidget {\n  final GPokemonCardFragment pokemon;\n\n  const PokemonCard({required this.pokemon});\n\n  @override\n  Widget build(BuildContext context) {\n    return Card(\n      child: InkWell(\n        onTap: () => Navigator.of(context)\n            .pushNamed('detail', arguments: {'id': pokemon.id}),\n        child: Padding(\n          padding: const EdgeInsets.all(8.0),\n          child: Column(\n            children: <Widget>[\n              SizedBox(\n                child: Ink.image(image: NetworkImage(pokemon.avatar)),\n                height: 200,\n                width: 200,\n              ),\n              Text(\n                pokemon.name,\n                style: Theme.of(context).textTheme.headline6,\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n")),Object(o.b)("p",null,"This means the ",Object(o.b)("inlineCode",{parentName:"p"},"PokemonCard")," Widget can be reused anywhere the ",Object(o.b)("inlineCode",{parentName:"p"},"PokemonCardFragment")," is used. It also means that if our data requirements for ",Object(o.b)("inlineCode",{parentName:"p"},"PokemonCard")," change (say, if we need to add a ",Object(o.b)("inlineCode",{parentName:"p"},"height")," property), we only need to update our ",Object(o.b)("inlineCode",{parentName:"p"},"PokemonCardFragment"),". Our ",Object(o.b)("inlineCode",{parentName:"p"},"AllPokemon")," Query and any other operations that use ",Object(o.b)("inlineCode",{parentName:"p"},"PokemonCardFragment")," don't need to be updated."),Object(o.b)("p",null,"This pattern leads to code that is easier to maintain, test, and reason about."),Object(o.b)("h2",{id:"fragments-on-root-query"},"Fragments on Root Query"),Object(o.b)("p",null,"The above pattern works even if your data requirements for a single screen include multiple GraphQL queries since you can include Fragments on any GraphQL type, including the root ",Object(o.b)("inlineCode",{parentName:"p"},"Query")," type."),Object(o.b)("p",null,"For example, let's say you want to add a user avatar Widget to the header of your ",Object(o.b)("inlineCode",{parentName:"p"},"PokemonListScreen")," that shows the currently logged-in user."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"MaterialApp\n  PokemonListScreen\n    UserAvatar\n    PokemonList\n      PokemonCard\n      PokemonCard\n      PokemonCard\n")),Object(o.b)("p",null,"You might structure your queries like so:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-graphql"}),"fragment PokemonCardFragment on Pokemon {\n  id\n  name\n  avatar\n}\n\nfragment PokemonListFragment on Query {\n  pokemons {\n    ...PokemonCardFragment\n  }\n}\n\nfragment UserAvatarFragment on Query {\n  user(id: $userId) {\n    id\n    avatar\n  }\n}\n\nquery PokemonListScreenQuery($userId: ID!) {\n  ...PokemonListFragment\n  ...UserAvatarFragment\n}\n")),Object(o.b)("p",null,"Even though you are fetching data from two different root queries (",Object(o.b)("inlineCode",{parentName:"p"},"pokemons")," and ",Object(o.b)("inlineCode",{parentName:"p"},"user"),"), you can use a single ",Object(o.b)("inlineCode",{parentName:"p"},"Operation")," Widget which will make a single network request for the ",Object(o.b)("inlineCode",{parentName:"p"},"PokemonListScreen"),"."))}s.isMDXComponent=!0},85:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return b}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),s=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=s(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),m=s(t),u=r,b=m["".concat(i,".").concat(u)]||m[u]||p[u]||o;return t?a.a.createElement(b,l(l({ref:n},c),{},{components:t})):a.a.createElement(b,l({ref:n},c))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);