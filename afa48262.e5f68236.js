(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{73:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return o})),r.d(t,"metadata",(function(){return l})),r.d(t,"rightToc",(function(){return c})),r.d(t,"default",(function(){return s}));var a=r(2),n=r(6),i=(r(0),r(86)),o={id:"custom-scalars",title:"Custom Scalars"},l={unversionedId:"custom-scalars",id:"custom-scalars",isDocsHomePage:!1,title:"Custom Scalars",description:"If our GraphQL schema includes custom scalar types, we'll need to configure Ferry's code generator to properly handle them.",source:"@site/../docs/custom-scalars.md",slug:"/custom-scalars",permalink:"/docs/custom-scalars",editUrl:"https://github.com/gql-dart/ferry/edit/master/docs/../docs/custom-scalars.md",version:"current",sidebar:"mainSidebar",previous:{title:"Structuring Queries",permalink:"/docs/structuring-queries"},next:{title:"Customizing the Client",permalink:"/docs/customization"}},c=[{value:"Configuring our <code>build.yaml</code> file",id:"configuring-our-buildyaml-file",children:[{value:"Configure Type Overrides",id:"configure-type-overrides",children:[]},{value:"Configure Custom Serializer",id:"configure-custom-serializer",children:[]},{value:"Complete <code>build.yaml</code> Example",id:"complete-buildyaml-example",children:[]}]},{value:"Creating a Custom Serializer",id:"creating-a-custom-serializer",children:[{value:"Using <code>StructuredSerializer</code>s",id:"using-structuredserializers",children:[]}]}],p={rightToc:c};function s(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"If our GraphQL schema includes custom ",Object(i.b)("inlineCode",{parentName:"p"},"scalar")," types, we'll need to configure Ferry's code generator to properly handle them."),Object(i.b)("h2",{id:"configuring-our-buildyaml-file"},"Configuring our ",Object(i.b)("inlineCode",{parentName:"h2"},"build.yaml")," file"),Object(i.b)("p",null,"Let's say our GraphQL schema includes a ",Object(i.b)("inlineCode",{parentName:"p"},"Date")," scalar that we want to map to Dart's ",Object(i.b)("inlineCode",{parentName:"p"},"DateTime")," type."),Object(i.b)("h3",{id:"configure-type-overrides"},"Configure Type Overrides"),Object(i.b)("p",null,"Specifying a Type Overrides tells the generator what Dart types to use when generating a type from our GraphQL schema (in this case our custom ",Object(i.b)("inlineCode",{parentName:"p"},"scalar")," type)."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:"{4}","{4}":!0}),"ferry_generator|graphql_builder:\n  enabled: true\n  options:\n    type_overrides:\n      Date:\n        name: DateTime\n")),Object(i.b)("p",null,'The key in the yaml Map should be the name of our custom scalar in our schema (i.e. "Date"), and ',Object(i.b)("inlineCode",{parentName:"p"},"name")," should be the name of the Dart type."),Object(i.b)("div",{className:"admonition admonition-important alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"important")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"We've included only the ",Object(i.b)("inlineCode",{parentName:"p"},"schema_builder")," above for brevity, but we will need to include this same type_overrides map for ",Object(i.b)("inlineCode",{parentName:"p"},"data_builder"),", ",Object(i.b)("inlineCode",{parentName:"p"},"var_builder"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"req_builder")," as well. See the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#complete-buildyaml-example"}),"complete build.yaml example")," for more details."))),Object(i.b)("p",null,"If our Dart type is not part of the ",Object(i.b)("inlineCode",{parentName:"p"},"dart:core")," library, we'd also need to import the file that contains the Dart type. DateTime ",Object(i.b)("em",{parentName:"p"},"is")," a part of ",Object(i.b)("inlineCode",{parentName:"p"},"dart:core"),", but if it weren't, we'd import it like so:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:"{7}","{7}":!0}),'ferry_generator|graphql_builder:\n  enabled: true\n  options:\n    type_overrides:\n      Date:\n        name: DateTime\n        import: "package:my_date_library/date_time.dart"\n')),Object(i.b)("h3",{id:"configure-custom-serializer"},"Configure Custom Serializer"),Object(i.b)("p",null,"If our Dart type is not a Dart Data Type, we also need to ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#create-a-custom-serializer"}),"define a custom serializer")," so that the generated classes can correctly serialize & deserialize the data."),Object(i.b)("p",null,"Assuming we've created a ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#create-a-custom-serializer"}),Object(i.b)("inlineCode",{parentName:"a"},"DateSerializer"))," for our custom ",Object(i.b)("inlineCode",{parentName:"p"},"Date")," scalar, we will need to include it in our ",Object(i.b)("inlineCode",{parentName:"p"},"serializer_builder"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'ferry_generator|serializer_builder:\n  enabled: true\n  options:\n    schema: my_project|lib/graphql/schema.graphql\n    custom_serializers:\n      - import: "package:path/to/date_serializer.dart"\n        name: DateSerializer\n')),Object(i.b)("h3",{id:"complete-buildyaml-example"},"Complete ",Object(i.b)("inlineCode",{parentName:"h3"},"build.yaml")," Example"),Object(i.b)("p",null,"Here's an example of what our final ",Object(i.b)("inlineCode",{parentName:"p"},"build.yaml")," might look like."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'targets:\n  $default:\n    builders:\n      ferry_generator|serializer_builder:\n        enabled: true\n        options:\n          schema: my_project|lib/schema.graphql\n          custom_serializers:\n            - import: "package:path/to/date_serializer.dart"\n              name: DateSerializer\n\n      ferry_generator|graphql_builder:\n        enabled: true\n        options:\n          schema: my_project|lib/schema.graphql\n          type_overrides:\n            Date:\n              name: DateTime\n')),Object(i.b)("h2",{id:"creating-a-custom-serializer"},"Creating a Custom Serializer"),Object(i.b)("p",null,"For Ferry to create instances of our generated Dart classes, with data from a GraphQL server, we'll need to create a custom ",Object(i.b)("inlineCode",{parentName:"p"},"built_value")," serializer to handle the custom ",Object(i.b)("inlineCode",{parentName:"p"},"scalar")," type."),Object(i.b)("p",null,"Let's assume that our GraphQL server returns our ",Object(i.b)("inlineCode",{parentName:"p"},"Date")," scalar as an ",Object(i.b)("inlineCode",{parentName:"p"},"int")," timestamp. Then, a custom serializer can look like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"import 'package:built_value/serializer.dart';\n\nclass DateSerializer implements PrimitiveSerializer<DateTime> {\n  @override\n  DateTime deserialize(\n    Serializers serializers,\n    Object serialized, {\n    FullType specifiedType = FullType.unspecified,\n  }) {\n    assert(serialized is int,\n        \"DateSerializer expected 'int' but got ${serialized.runtimeType}\");\n    return DateTime.fromMillisecondsSinceEpoch(serialized);\n  }\n\n  @override\n  Object serialize(\n    Serializers serializers,\n    DateTime date, {\n    FullType specifiedType = FullType.unspecified,\n  }) =>\n      date.millisecondsSinceEpoch;\n\n  @override\n  Iterable<Type> get types => [DateTime];\n\n  @override\n  String get wireName => \"Date\";\n}\n")),Object(i.b)("p",null,"And that's it! Now when we run our ",Object(i.b)("inlineCode",{parentName:"p"},"pub run build_runner build")," command, Ferry's generators will automatically override our GraphQL ",Object(i.b)("inlineCode",{parentName:"p"},"Date")," scalar with the Dart ",Object(i.b)("inlineCode",{parentName:"p"},"DateTime")," type and use our ",Object(i.b)("inlineCode",{parentName:"p"},"DateSerializer")," to serialize & deserialize data."),Object(i.b)("h3",{id:"using-structuredserializers"},"Using ",Object(i.b)("inlineCode",{parentName:"h3"},"StructuredSerializer"),"s"),Object(i.b)("p",null,"We've implemented the above ",Object(i.b)("inlineCode",{parentName:"p"},"DateSerializer")," using the ",Object(i.b)("inlineCode",{parentName:"p"},"PrimitiveSerializer")," from ",Object(i.b)("inlineCode",{parentName:"p"},"built_value"),". However, if we were building a serializer for a non-primitive Dart type, we'd probably want to use the ",Object(i.b)("inlineCode",{parentName:"p"},"StructuredSerializer")," instead."),Object(i.b)("p",null,"Since ",Object(i.b)("inlineCode",{parentName:"p"},"built_value")," doesn't use standard Json by default, rather than implementing ",Object(i.b)("inlineCode",{parentName:"p"},"StructuredSerializer")," directly, we may prefer to extend the ",Object(i.b)("inlineCode",{parentName:"p"},"JsonSerializer")," from ",Object(i.b)("inlineCode",{parentName:"p"},"gql_code_builder"),". For example, here's a serializer for the ",Object(i.b)("inlineCode",{parentName:"p"},"Operation")," type from ",Object(i.b)("inlineCode",{parentName:"p"},"gql_exec")," that Ferry's generators use internally."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),'import "package:built_value/serializer.dart";\nimport "package:gql/language.dart";\nimport "package:gql_exec/gql_exec.dart";\n\nimport "package:gql_code_builder/src/serializers/json_serializer.dart";\n\nclass OperationSerializer extends JsonSerializer<Operation> {\n  @override\n  Operation fromJson(Map<String, dynamic> json) => Operation(\n        document: parseString(json["document"] as String),\n        operationName: json["operationName"] as String,\n      );\n\n  @override\n  Map<String, dynamic> toJson(Operation operation) => <String, dynamic>{\n        "document": printNode(operation.document),\n        if (operation.operationName != null)\n          "operationName": operation.operationName,\n      };\n}\n')),Object(i.b)("p",null,"For more information about serialization using ",Object(i.b)("inlineCode",{parentName:"p"},"built_value"),", check out ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://medium.com/dartlang/darts-built-value-for-serialization-f5db9d0f4159"}),"this blog post"),"."))}s.isMDXComponent=!0},86:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return b}));var a=r(0),n=r.n(a);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=n.a.createContext({}),s=function(e){var t=n.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return n.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},m=n.a.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(r),m=a,b=u["".concat(o,".").concat(m)]||u[m]||d[m]||i;return r?n.a.createElement(b,l(l({ref:t},p),{},{components:r})):n.a.createElement(b,l({ref:t},p))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return n.a.createElement.apply(null,o)}return n.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"}}]);